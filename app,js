// import {express} from 'express';
// import {ejs} from 'ejs';
// import{mongoose} from 'mongoose';
// import {bodyParser} from 'body-parser';

// mongoose.connect("mongodb://localhost:27017/newCollection", {
//   useNewUrlParser: true,
//   useUnifiedTopology: true
// });
  
// const bestPath = {
//   bestPath: String,
//   query: String
// };
  
// const Contact = mongoose.model("Contact", bestPath);
// const app = express();
  
// app.set("view engine", "ejs");
  
// app.use(bodyParser.urlencoded({
//     extended: true
// }));
  
// app.use(express.static(__dirname + '/public'));
  
// app.get("/contact", function(req, res){
//     res.render("contact");
// });
  
// app.post("/contact", function (req, res) {
//     console.log(req.body.email);
//   const contact = new Contact({
//       email: req.body.email,
//       query: req.body.query,
//   });
//   contact.save(function (err) {
//       if (err) {
//           throw err;
//       } else {
//         res.render("contact");
//       }
//   });
// });
  
// app.listen(3000, function(){
//     console.log("App is running on Port 3000");
// });






// // let uri = process.env.MONGODB_URI
// // let dbName = process.env.MONGODB_DB
// // let cachedClient = null
// // let cachedDb = null
// // const { db } = await connectToDatabase();
// // let query = { bestPath: 'someEmail' };
// // let user = await db.collection('users').findOne(query);

// // if (user) console.log(user);
// // if (!uri) {
// //   throw new Error(
// //     'Please define the MONGODB_URI environment variable inside .env.local'
// //   )
// // }

// // if (!dbName) {
// //   throw new Error(
// //     'Please define the MONGODB_DB environment variable inside .env.local'
// //   )
// // }

// // export async function connectToDatabase() {
// //   if (cachedClient && mlDB) {
// //     return { client: cachedClient, db: mlDB }
// //   }

// //   const client = await MongoClient.connect(uri, {
// //     useNewUrlParser: true,
// //     useUnifiedTopology: true,
// //   })

// //   const db = await client.db(dbName)

// //   cachedClient = client
// //   mlDB = db

// //   return { client, db }
// // }



